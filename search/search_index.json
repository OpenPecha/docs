{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Why OpenPecha? Digital text is quickly becoming essential to modern daily life. The article you\u2019re reading right now is born digital; unlike texts of the not-so-distant past, it may never be printed at all. Worldwide, the trend is clear: Digital text is on the way in, and print is on its way out. Year-by-year, more and more readers are turning to ebooks, internet news, and other forms of ereading, while generation-by-generation, print is becoming less and less relevant. These trends aren\u2019t unique to English\u2014to meet the demands and expectations of today\u2019s readers, Tibetan texts, too, are being digitized by many organizations and institutions with a shared appreciation for the Tibetan literary heritage. They include a variety of secular publishers, monastic institutions, and Buddhist foundations, among others. But while these organizations share common goals for common texts, their work is all too frequently completely disconnected from the community at large. This situation negatively impacts what is already a minoritized and under-resourced language. While competition\u2014from other languages, as well as other publishers in the Tibetan etext world\u2014has been a driver of innovation in the adoption of ereading technology, we believe that a rich, shared data source is not only in everyone\u2019s best interest, but the only practical way forward when we consider the time, effort, expertise, and money that quality digitization takes. That\u2019s why we\u2019ve designed OpenPecha to be a public, open platform for collaborative etext curation and annotation sharing. Its aim is providing a wide range of users with the latest version of the exact \u201cview\u201d of any text they need, while maintaining the integrity of the text and its annotations, and simultaneously allowing for community improvements and additions. In this paper, we explore the details of how the project came to be; what it is and how it works; while also presenting a few common use cases. What is OpenPecha? As we\u2019ve touched on above, a truly modern digital publication is never a \u201cfinal\u201d, static image. Instead, it\u2019s a living, breathing entity in constant communication with its community. The Tibetan digital landscape needs an open space where data can be gathered; on offer to anyone in the community; and open to collaborative curation and annotation, while also responding to users\u2019 needs. This kind of public-domain, digital publishing will be familiar to anyone who\u2019s heard of Project Gutenburg and its Distributed Proofreaders platform, and the offshoots they\u2019ve inspired (GITenberg, WikiBooks, etc.). From a practical standpoint, that means we need a tool that imports from, and exports to, formats common to users who access Tibetan texts; that transfers annotations from one base text to another; and that offers an organized, systematic catalog of titles, versions, annotations, and related texts. This data-first maintenance and interoperability are the core aims of OpenPecha\u2019s database, format, and toolkit. First, it aims to store every available electronic representation of each text, along with all existing annotations. From there, both the texts and their annotations are downloadable; contributions are uploadable; and users can export to a variety of common formats (like EPUB and PDF). This means that texts can keep improving while not losing any of their annotations. It also allows for any NLP (Natural Language Processing), NER (Named Entity Recognition), or error-detecting models to be applied to the entirety of the corpus without interfering with existing data created by others. Finally, it gives the community of readers access to the most-current proofread ebooks that contain only the annotation layers they need, in the format of their choice. In short, the goal is to provide something that is: Flexible in application, serving a wide variety of Tibetan language professionals; Durable in that it uses free tools and platforms, with minimal maintenance; Editable at all stages of the workflow, and at every level of the document; Easy-to-learn and human-friendly for the average user; Open to anyone anywhere, providing a large catalog of texts with a wide range of annotation schema; and Collaborative , to leverage shared knowledge in a small, specialized field, and allow for crowdsourced improvements. Who is OpenPecha for? Text Owners . Text owners are groups of people who are linked to a particular Tibetan text through their history, culture, and heritage, and have a continuing relationship that brings the text into living, communicative contexts; this includes, for example, living monastic traditions that study the particular texts of their Buddhist lineage or research projects who specialize in a given collection Find contributors for their own collections Manage pechas in their own collections (admin Master branches) Academics & Researchers in Tibetan Studies; Philology; Digital Humanities; Linguistics; Monastic Settings; or any other field who need to access, read, translate, edit, or annotate Tibetan texts. OPF allows them to: Build custom corpuses with any annotations they like Contribute texts or annotations Update texts and annotations Export works in their preferred format Publishers Download the best & latest version of a text Download or contribute annotations Export in preferred format (EPUB for publishing, etc.) Digital Libraries Connect their user interface to OpenPecha to fetch etexts and the annotations they need (IIIF, International Image Interoperability Framework, for image libraries, etc.) Update and contribute new annotations via Github API Add improvements to the toolkit according to their needs Use OpenPecha as an editing tool for updating their content as part of a dynamic publishing workflow Readers Export the latest & best version of a text in their preferred format Programmers Link to the best version of texts with annotations through API (Application Programming Interface)","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#why-openpecha","text":"Digital text is quickly becoming essential to modern daily life. The article you\u2019re reading right now is born digital; unlike texts of the not-so-distant past, it may never be printed at all. Worldwide, the trend is clear: Digital text is on the way in, and print is on its way out. Year-by-year, more and more readers are turning to ebooks, internet news, and other forms of ereading, while generation-by-generation, print is becoming less and less relevant. These trends aren\u2019t unique to English\u2014to meet the demands and expectations of today\u2019s readers, Tibetan texts, too, are being digitized by many organizations and institutions with a shared appreciation for the Tibetan literary heritage. They include a variety of secular publishers, monastic institutions, and Buddhist foundations, among others. But while these organizations share common goals for common texts, their work is all too frequently completely disconnected from the community at large. This situation negatively impacts what is already a minoritized and under-resourced language. While competition\u2014from other languages, as well as other publishers in the Tibetan etext world\u2014has been a driver of innovation in the adoption of ereading technology, we believe that a rich, shared data source is not only in everyone\u2019s best interest, but the only practical way forward when we consider the time, effort, expertise, and money that quality digitization takes. That\u2019s why we\u2019ve designed OpenPecha to be a public, open platform for collaborative etext curation and annotation sharing. Its aim is providing a wide range of users with the latest version of the exact \u201cview\u201d of any text they need, while maintaining the integrity of the text and its annotations, and simultaneously allowing for community improvements and additions. In this paper, we explore the details of how the project came to be; what it is and how it works; while also presenting a few common use cases.","title":"Why OpenPecha?"},{"location":"#what-is-openpecha","text":"As we\u2019ve touched on above, a truly modern digital publication is never a \u201cfinal\u201d, static image. Instead, it\u2019s a living, breathing entity in constant communication with its community. The Tibetan digital landscape needs an open space where data can be gathered; on offer to anyone in the community; and open to collaborative curation and annotation, while also responding to users\u2019 needs. This kind of public-domain, digital publishing will be familiar to anyone who\u2019s heard of Project Gutenburg and its Distributed Proofreaders platform, and the offshoots they\u2019ve inspired (GITenberg, WikiBooks, etc.). From a practical standpoint, that means we need a tool that imports from, and exports to, formats common to users who access Tibetan texts; that transfers annotations from one base text to another; and that offers an organized, systematic catalog of titles, versions, annotations, and related texts. This data-first maintenance and interoperability are the core aims of OpenPecha\u2019s database, format, and toolkit. First, it aims to store every available electronic representation of each text, along with all existing annotations. From there, both the texts and their annotations are downloadable; contributions are uploadable; and users can export to a variety of common formats (like EPUB and PDF). This means that texts can keep improving while not losing any of their annotations. It also allows for any NLP (Natural Language Processing), NER (Named Entity Recognition), or error-detecting models to be applied to the entirety of the corpus without interfering with existing data created by others. Finally, it gives the community of readers access to the most-current proofread ebooks that contain only the annotation layers they need, in the format of their choice. In short, the goal is to provide something that is: Flexible in application, serving a wide variety of Tibetan language professionals; Durable in that it uses free tools and platforms, with minimal maintenance; Editable at all stages of the workflow, and at every level of the document; Easy-to-learn and human-friendly for the average user; Open to anyone anywhere, providing a large catalog of texts with a wide range of annotation schema; and Collaborative , to leverage shared knowledge in a small, specialized field, and allow for crowdsourced improvements.","title":"What is OpenPecha?"},{"location":"#who-is-openpecha-for","text":"Text Owners . Text owners are groups of people who are linked to a particular Tibetan text through their history, culture, and heritage, and have a continuing relationship that brings the text into living, communicative contexts; this includes, for example, living monastic traditions that study the particular texts of their Buddhist lineage or research projects who specialize in a given collection Find contributors for their own collections Manage pechas in their own collections (admin Master branches) Academics & Researchers in Tibetan Studies; Philology; Digital Humanities; Linguistics; Monastic Settings; or any other field who need to access, read, translate, edit, or annotate Tibetan texts. OPF allows them to: Build custom corpuses with any annotations they like Contribute texts or annotations Update texts and annotations Export works in their preferred format Publishers Download the best & latest version of a text Download or contribute annotations Export in preferred format (EPUB for publishing, etc.) Digital Libraries Connect their user interface to OpenPecha to fetch etexts and the annotations they need (IIIF, International Image Interoperability Framework, for image libraries, etc.) Update and contribute new annotations via Github API Add improvements to the toolkit according to their needs Use OpenPecha as an editing tool for updating their content as part of a dynamic publishing workflow Readers Export the latest & best version of a text in their preferred format Programmers Link to the best version of texts with annotations through API (Application Programming Interface)","title":"Who is OpenPecha for?"},{"location":"exporters/","text":"OpenPecha Exporters OpenPecha Exporters are just plugins that export text in OPF (OpenPecha's native format) to other format such as .epub, .docx, etc.","title":"Exporters"},{"location":"exporters/#openpecha-exporters","text":"OpenPecha Exporters are just plugins that export text in OPF (OpenPecha's native format) to other format such as .epub, .docx, etc.","title":"OpenPecha Exporters"},{"location":"importers/","text":"OpenPecha Importers Openpecha Importers are just plugins that import text into OPF.","title":"Importers"},{"location":"importers/#openpecha-importers","text":"Openpecha Importers are just plugins that import text into OPF.","title":"OpenPecha Importers"},{"location":"opf-format/","text":"OPF Format OpenPecha Repositories OpenPecha etexts are stored as Git repositories. At its heart, Git is a version control system that manages and stores revisions of digital projects. OpenPecha simply uses Git to store and manage versions of Tibetan texts. Within the Git system, OPF files come with the following branches: Master The master branch contains the .opf, which is protected Only admins and text owners can directly update the master branch from the other online branches Publication The publication branch is for collaboratively improving the text Only admin or text owners can merge changes from the publication branch to the master branch Github action is set up in such a way that it looks for commands issued by the owner in the commits, then updates the .opf in the master branch if there are changes in the publication branch Custom repos: This is where users outside of the collaboration team can edit text and export the text into a desirable format\u2014so long as the parser can handle the user\u2019s specifications, they can collaborate with OpenPecha to create it These edits are not recorded, so they are not used for updating the master branch OPF The exported text is released in the \u201ctemp\u201d section of the release Releases Initial section contains the src text as-is; they may be plain text, ebook, HFML, word, etc Temp section contains the exported text of the user outside of the collaboration V### section contains the official release of the exported text OPF Files OPF is an open folder format, which means it\u2019s not a compiled file, but simply an open folder with a specific hierarchy. Every OpenPecha file consists of a base text (or base texts, in the case of works with multiple volumes) in plain text (ie, v001.txt, also called the base layer) in the \u201cbase\u201d folder and its annotations (layer_name.yml) in the corresponding \u201cv001\u201d folder of the \u201clayers\u201d folder. OPF assumes that pecha with a single base layer has only one volume. A sample OPF file might have an internal structure something like this : \ud83d\udcc1 P000780.opf \ud83d\udcc4 index.yml \ud83d\udcc4 meta.yml \ud83d\udcc1 base v001.txt v002.txt \ud83d\udcc1 layers \ud83d\udcc1 v001 \ud83d\udcc4 Title.yml \ud83d\udcc4 Author.yml \ud83d\udcc4 Tsawa.yml \ud83d\udcc4 Yigchung.yml \ud83d\udcc1 v002 \ud83d\udcc4 title.yml or follow this live example P0000001 In the example above, the text has the globally unique and persistent identifier \u201cP000780\u201d; its source text is the \u201cbase\u201d directory. (In this case, it comes from an image scan and its raw OCR data found in the github release \u201cv0.1\u201d). It is then formatted as an OPF base text. This OPF has annotation layers for metadata (meta.yml), index/toc (index.yml), and titles (title.yml). \u201cLayers\u201d is simply a list of the annotation layers that are linked to the text, and \u201ctitle\u201d is a layer that gives formatting annotations for titles (similar to the inline tag in HTML). The key to the format is the Index. The Index splits a text into subsections, and gives these sections unique identifiers (UUIDs). These logical units, for convenience\u2019s sake, use the source document\u2019s splits. Any annotation reference is also then stored in the Index as a unique ID associated with a span of characters. Whenever there\u2019s a change to the base text, these spans are updated. Whenever an annotation is referred to outside the Index, however, it isn\u2019t referred to as a span (as it is in a tag system like XML, for example), but as an ID. Layers Layers are represented by YAML file. They are just collection of a particular types of annotations with some attributes. Here is the example of Correction layer: id : 2ea1861be051406a858307cd592ef5ec annotation_type : Correction revision : '00001' annotations : 1e19a11e32d54d7897021d5be594d563 : correction : \u0f58\u0f46\u0f72\u0f60\u0f7c\u0f0b certainty : null span : start : 145863 end : 145868 497e4044c77b4877a233a3c98b267672 : correction : \u0f58\u0f46\u0f72\u0f60\u0f7c\u0f0b certainty : null span : start : 145966 end : 145971 Annotations All the annotations in OPF are just span of start and end character index of the base layer and some attributes of the particular annotation. The most simplest form of annotation is just having the a span. Here is the list of annotation currently supported by OpenPecha class LayerEnum ( Enum , str ): index = \"index\" book_title = \"BookTitle\" sub_title = \"SubTitle\" book_number = \"BookNumber\" poti_title = \"PotiTitle\" author = \"Author\" chapter = \"Chapter\" topic = \"Text\" sub_topic = \"SubText\" pagination = \"Pagination\" citation = \"Citation\" correction = \"Correction\" error_candidate = \"ErrorCandidate\" peydurma = \"Peydurma\" sabche = \"Sabche\" tsawa = \"Tsawa\" yigchung = \"Yigchung\" archaic = \"Archaic\" durchen = \"Durchen\" footnote = \"Footnote\" segment = \"Segment\"","title":"OPF Format"},{"location":"opf-format/#opf-format","text":"","title":"OPF Format"},{"location":"opf-format/#openpecha-repositories","text":"OpenPecha etexts are stored as Git repositories. At its heart, Git is a version control system that manages and stores revisions of digital projects. OpenPecha simply uses Git to store and manage versions of Tibetan texts. Within the Git system, OPF files come with the following branches: Master The master branch contains the .opf, which is protected Only admins and text owners can directly update the master branch from the other online branches Publication The publication branch is for collaboratively improving the text Only admin or text owners can merge changes from the publication branch to the master branch Github action is set up in such a way that it looks for commands issued by the owner in the commits, then updates the .opf in the master branch if there are changes in the publication branch Custom repos: This is where users outside of the collaboration team can edit text and export the text into a desirable format\u2014so long as the parser can handle the user\u2019s specifications, they can collaborate with OpenPecha to create it These edits are not recorded, so they are not used for updating the master branch OPF The exported text is released in the \u201ctemp\u201d section of the release Releases Initial section contains the src text as-is; they may be plain text, ebook, HFML, word, etc Temp section contains the exported text of the user outside of the collaboration V### section contains the official release of the exported text","title":"OpenPecha Repositories"},{"location":"opf-format/#opf-files","text":"OPF is an open folder format, which means it\u2019s not a compiled file, but simply an open folder with a specific hierarchy. Every OpenPecha file consists of a base text (or base texts, in the case of works with multiple volumes) in plain text (ie, v001.txt, also called the base layer) in the \u201cbase\u201d folder and its annotations (layer_name.yml) in the corresponding \u201cv001\u201d folder of the \u201clayers\u201d folder. OPF assumes that pecha with a single base layer has only one volume. A sample OPF file might have an internal structure something like this : \ud83d\udcc1 P000780.opf \ud83d\udcc4 index.yml \ud83d\udcc4 meta.yml \ud83d\udcc1 base v001.txt v002.txt \ud83d\udcc1 layers \ud83d\udcc1 v001 \ud83d\udcc4 Title.yml \ud83d\udcc4 Author.yml \ud83d\udcc4 Tsawa.yml \ud83d\udcc4 Yigchung.yml \ud83d\udcc1 v002 \ud83d\udcc4 title.yml or follow this live example P0000001 In the example above, the text has the globally unique and persistent identifier \u201cP000780\u201d; its source text is the \u201cbase\u201d directory. (In this case, it comes from an image scan and its raw OCR data found in the github release \u201cv0.1\u201d). It is then formatted as an OPF base text. This OPF has annotation layers for metadata (meta.yml), index/toc (index.yml), and titles (title.yml). \u201cLayers\u201d is simply a list of the annotation layers that are linked to the text, and \u201ctitle\u201d is a layer that gives formatting annotations for titles (similar to the inline tag in HTML). The key to the format is the Index. The Index splits a text into subsections, and gives these sections unique identifiers (UUIDs). These logical units, for convenience\u2019s sake, use the source document\u2019s splits. Any annotation reference is also then stored in the Index as a unique ID associated with a span of characters. Whenever there\u2019s a change to the base text, these spans are updated. Whenever an annotation is referred to outside the Index, however, it isn\u2019t referred to as a span (as it is in a tag system like XML, for example), but as an ID.","title":"OPF Files"},{"location":"opf-format/#layers","text":"Layers are represented by YAML file. They are just collection of a particular types of annotations with some attributes. Here is the example of Correction layer: id : 2ea1861be051406a858307cd592ef5ec annotation_type : Correction revision : '00001' annotations : 1e19a11e32d54d7897021d5be594d563 : correction : \u0f58\u0f46\u0f72\u0f60\u0f7c\u0f0b certainty : null span : start : 145863 end : 145868 497e4044c77b4877a233a3c98b267672 : correction : \u0f58\u0f46\u0f72\u0f60\u0f7c\u0f0b certainty : null span : start : 145966 end : 145971","title":"Layers"},{"location":"opf-format/#annotations","text":"All the annotations in OPF are just span of start and end character index of the base layer and some attributes of the particular annotation. The most simplest form of annotation is just having the a span. Here is the list of annotation currently supported by OpenPecha class LayerEnum ( Enum , str ): index = \"index\" book_title = \"BookTitle\" sub_title = \"SubTitle\" book_number = \"BookNumber\" poti_title = \"PotiTitle\" author = \"Author\" chapter = \"Chapter\" topic = \"Text\" sub_topic = \"SubText\" pagination = \"Pagination\" citation = \"Citation\" correction = \"Correction\" error_candidate = \"ErrorCandidate\" peydurma = \"Peydurma\" sabche = \"Sabche\" tsawa = \"Tsawa\" yigchung = \"Yigchung\" archaic = \"Archaic\" durchen = \"Durchen\" footnote = \"Footnote\" segment = \"Segment\"","title":"Annotations"}]}